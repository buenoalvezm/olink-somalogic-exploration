---
title: "Untitled"
format: html
---


# Set up

```{r}
library(tidyverse)
library(readxl)
library(tidymodels)
library(embed)

olink_data <- read_tsv("../olink_data/phase2_unbridged_data_overlapping_HT_pandisease_20250926.tsv")
soma_data <- read_tsv("../soma_data/data_phase2_somalogic_curated_20250922.tsv")
manifest_raw <- read_excel("../metadata/samples_2025-05-12.xlsx") 
manifest <- read_tsv("../olink_data/metadata_olink_soma_phase2.tsv")

data_olink <- olink_data
data_soma <- 
  soma_data |> 
  pivot_longer(values_to = "RFU",
  names_to = "Assay", 
  -DAid)
  meta <- manifest
```

```{r}
# Samples subset
# soma_id <- 
#     soma_data |> 
#     filter(!is.na(DAid)) |> 
#     distinct(DAid)

# meta <- 
#     manifest |> 
#     filter(DAid %in% soma_id$DAid) |> 
#     select(DAid, Cohort, Class, Diagnose, Disease, Age, Sex, BMI) |> 
#     mutate(Disease = case_when(Cohort == "BAMS" & Diagnose == "4_random" ~ "Healthy - 4 (BAMSE)",
#     Cohort == "BAMS" & Diagnose == "8_random" ~ "Healthy - 8 (BAMSE)",
#     Cohort == "BAMS" & Diagnose == "16_random" ~ "Healthy - 16 (BAMSE)",
#     Cohort == "BAMS" & Diagnose == "24_random" ~ "Healthy - 24 (BAMSE)",
#     Cohort == "PARD" & Diagnose == "PD" ~ "Parkinson's disease",
#     Cohort == "PARD" & Diagnose == "Healthy control" ~ "Healthy (PD)",
#     Cohort == "PREG" ~ "Pregnancy",
#     Cohort == "UCA2" & Diagnose == "OVC" ~ "Ovarian cancer",
#     Cohort == "UCA2" & Diagnose == "PRC" ~ "Prostate cancer",
#     Cohort == "UCA2" & Diagnose == "CRC" ~ "Colorectal cancer",
#     Cohort == "UCA2" & Diagnose == "LUNG" ~ "Lung cancer (UCAN)",
#     Cohort == "UCA2" & Diagnose == "BRC" ~ "Breast cancer (UCAN)",
#     T ~ Disease),
#     Class = case_when(Cohort == "BAMS" ~ "Healthy",
#     Cohort == "UCA2" ~ "Cancer",
#     Cohort == "PREG" ~ "Pregnancy",
#     Cohort == "BAMS" ~ "Childhood development",
#     Cohort == "PARD" & Diagnose == "PD" ~ "Neurologic",
#     Cohort == "PARD" & Diagnose == "Healthy control" ~ "Healthy",
#     T ~ Class))

# data_olink <- 
#     olink_data |> 
#     filter(DAid %in% soma_id$DAid)

# data_soma <- 
#     soma_data |> 
#     mutate(RFU = log2(RFU))
```

## Plot

```{r}
meta |> 
    filter(is.na(Disease)) |> 
    count(Cohort, Disease)

disease_n <- 
    meta |> 
    count(Class, Disease) |> 
    mutate(Class = factor(Class)) |> 
    arrange(Class) 

disease_n |> 
    mutate(Disease = factor(Disease, levels = unique(disease_n$Disease))) |> 
    ggplot(aes(Disease, n, fill = Class)) +
    geom_col() +
    geom_text(aes(label = n, color = Class, y = n +10)) +
    coord_flip() +
    scale_color_manual(values = pal_class)+
    scale_fill_manual(values = pal_class) +
    theme_hpa()

ggsave(savepath("disease_n.png"), h = 8, w =7)
```

# Overlapping proteins

```{r}
ht_assays <- 
  data_ht_all |> 
  distinct(Assay) |> 
  pull()

soma_assays <- 
  data_soma_all |> 
  distinct(EntrezGeneSymbol) |> 
  pull()

overlapping_assays <- intersect(ht_assays, soma_assays)
length(overlapping_assays)
```

# Aptamers per protein

```{r}
data_soma_all |> 
    distinct(EntrezGeneSymbol, Assay) |> 
    filter(EntrezGeneSymbol %in% overlapping_assays) |> 
    count(EntrezGeneSymbol, name = "n_aptamers") |> 
    arrange(-n_aptamers) |> 
    filter(n_aptamers > 1) |> 
    count(n_aptamers, name = "n_proteins") |> 
    mutate(n_aptamers = factor(n_aptamers)) |> 
    ggplot(aes(n_aptamers, n_proteins)) + 
    geom_col() +
    geom_text(aes(label = n_proteins, y = n_proteins + 10)) +
    labs(x = "Number of aptamers", y = "Number of proteins") +
    theme_hpa()
ggsave(savepath("n_aptamers_protein.png"), h = 5, w =5)

plot_boxplot(platform = "Somalogic", type = "aptamer", protein = "C3")
plot_boxplot(platform = "Somalogic", type = "aptamer", protein = "VEGFA")
```
# UMAP

```{r}
soma_dat <- 
    data_soma |> 
    rename(NPX = RFU) |> 
    select(DAid, Assay, NPX) |> 
    filter(!is.na(DAid)) |> 
    mutate(NPX = ifelse(NPX == -Inf, 0, NPX))

umap_olink <- do_umap(data = data_olink, wide = F)
umap_soma <- do_umap(data = soma_dat, wide = F)

umap_combined <- 
    umap_olink |> 
    mutate(Platform = "Olink") |> 
    bind_rows(umap_soma |> 
    mutate(Platform = "Somalogic"))

umap_combined |> 
    left_join(meta, by = c("Sample" ="DAid")) |> 
    ggplot(aes(UMAP1, UMAP2, color = Class)) +
    geom_point() +
    facet_wrap(~Platform, scales = "free") +
    scale_color_manual(values = pal_class) +
    theme_hpa()

ggsave(savepath("umap_olink_soma.png"), h = 5, w = 10)

data_soma |> 
    filter(Assay == "seq.25302.6") |> 
    left_join(manifest, by = "DAid") |> 
    ggplot(aes(Disease, RFU)) +
    geom_quasirandom()
```


# ANOVA

## Olink

```{r}
data_anova_olink <-
  data_olink |>
  select(DAid, Assay, NPX) %>%
  left_join(meta |>
              select(DAid, Disease, Age, Sex, BMI), by = "DAid") |>
  mutate(BMI = ifelse(BMI == 0, NA, BMI)) |> 
  filter(!Disease %in% c("Healthy - 4 (BAMSE)", "Healthy - 8 (BAMSE)", "Healthy - 16 (BAMSE)", "Healthy - 24 (BAMSE)", "Pregnancy")) |> 
    mutate(Disease = factor(Disease),
  BMI = as.numeric(BMI)) 

#saveRDS(data_anova, savepath_data("ANOVA", "anova_dat.rds"))

# Run ANOVA for all proteins
anova_olink <-
  map_df(unique(data_anova_olink$Assay), function(protein) {
    do_anova(df = data_anova_olink,
             protein = protein)
  })

df_protein <- filter(data_anova_olink, Assay == "GFAP")
model <- lm(NPX ~ Age + Sex + BMI + Disease, data = df_protein)
alias(model)


anova_check_olink <-
  map_df(unique(data_anova_olink$Assay), function(protein) {
    do_anova_check(df = data_anova_olink,
             protein = protein)
  })

# Adjust p-values
anova_olink_adj <-
  anova_olink |>
  filter(term != "(Intercept)") |>
  mutate(p.adjusted = p.adjust(p.value, method = "BH")) |>
  relocate(p.adjusted, .after = p.value)

saveRDS(anova_olink_adj, "data/processed/ANOVA_Olink.rds")


plot_variance(anova_res_adjusted = anova_olink_adj, perc_variation = 45)

ggsave(savepath("variance_olink.pdf"), h = 5, w = 10)
```

## Somalogic

```{r}
data_anova_soma<-
  soma_dat |>
  select(DAid, Assay, NPX) %>%
  left_join(meta |>
              select(DAid, Disease, Age, Sex, BMI), by = "DAid") |>
  mutate(BMI = ifelse(BMI == 0, NA, BMI)) |> 
  filter(!Disease %in% c("Healthy - 4 (BAMSE)", "Healthy - 8 (BAMSE)", "Healthy - 16 (BAMSE)", "Healthy - 24 (BAMSE)", "Pregnancy")) |> 
    mutate(Disease = factor(Disease),
  BMI = as.numeric(BMI)) 

#saveRDS(data_anova, savepath_data("ANOVA", "anova_dat.rds"))

# Run ANOVA for all proteins
anova_soma <-
  map_df(unique(data_anova_soma$Assay), function(protein) {
    do_anova(df = data_anova_soma,
             protein = protein)
  })

# Adjust p-values
anova_soma_adj <-
  anova_soma |>
  filter(term != "(Intercept)") |>
  mutate(p.adjusted = p.adjust(p.value, method = "BH")) |>
  relocate(p.adjusted, .after = p.value)

saveRDS(anova_soma_adj, "data/processed/ANOVA_Soma.rds")


plot_variance(anova_res_adjusted = anova_soma_adj, perc_variation = 45)
```

## Comparison

```{r}
overlapping_proteins <- 
    data_soma |> 
    distinct(EntrezGeneSymbol) |> 
    filter(EntrezGeneSymbol %in% data_olink$Assay) |> 
    pull(EntrezGeneSymbol)

anova_soma_adj
anova_olink_adj


anova_soma_adj |> 
    rename(Assay = Protein) |> 
    translate_soma() |> 
    select(Assay, term, Eta2_perc_olink = Eta2_perc) |> 
    filter(Assay %in% overlapping_assays) |> 
    left_join(anova_olink_adj |> 
    select(Assay = Protein, term, Eta2_perc_soma = Eta2_perc), by = c("Assay", "term")) |> 
    filter(term != "Residuals") |> 
    ggplot(aes(Eta2_perc_soma, Eta2_perc_olink, color = term)) +
    geom_point() +
    geom_text_repel(aes(label = Assay), show.legend = F) +
    facet_wrap(~term, scales = "free") +
    scale_color_manual(values = pal_anova) +
    theme_hpa()
```

### Plot up/down?

# ML (separate)

```{r}

meta

```

# ML (combined)

```{r}

```
# Age prediction Soma/Olink

## Olink

```{r}
meta_age <- 
    meta |> 
    filter(!is.na(Age)) |> 
    select(DAid, Age) 

data_age <- 
    data_olink |> 
    filter(DAid %in% meta_age$DAid) |> 
    select(DAid, Assay, NPX) |> 
    pivot_wider(names_from = Assay, 
    values_from = NPX) |> 
    left_join(meta_age, by = "DAid") 

split_age <- generate_split(data = data_age, variable_stratify = "Age")

age_prediction <- 
    continuous_prediction(split_train = split_age$data_train,
           split_test = split_age$data_test,
           variable_predict = "Age",
           seed = 213) 

saveRDS(age_prediction, "data/processed/ML_age_Olink.rds")
# Plot important proteins
age_prediction$important_proteins |> 
  head(25) |> 
  ggplot(aes(x = Variable, y = Importance, color = Sign)) +
  geom_segment(aes(x = Variable, xend = Variable, y = 0, yend = Importance), linewidth = 0.8) +
  geom_point(size = 3) +
  coord_flip() +
  theme_hpa()


# Top 10 profiles
top10_olink <- 
  age_prediction$important_proteins |> 
  head(10) |> 
  pull(Variable)

data_olink |> 
  filter(Assay %in% top10_olink) |> 
  left_join(meta |> 
  select(DAid, Age, Class), by = "DAid") |> 
  mutate(Assay = factor(Assay, levels = top10_olink)) |> 
  ggplot(aes(Age, NPX)) +
  geom_point(aes(color = Class)) +
  geom_smooth(color = "white") +
  facet_wrap(~Assay, scales = "free_y", nrow = 2) +
  scale_color_manual(values = pal_class) +
  theme_hpa()


# Plot predictions
R2 <-
  age_prediction$performance |>
  filter(.metric == "rsq") |>
  pull(.estimate) |>
  round(2)

age_prediction$predictions |>
  mutate(DAid = split_age$data_test$DAid) |>
  left_join(meta, by = "DAid") |>
  mutate(offset = Variable - .pred) |>
  ggplot(aes(Variable, .pred, color = offset)) +
  geom_point() +
  geom_abline(intercept = 0,
              slope = 1,
              lty = "dashed") +
  geom_text(aes(
    label = paste0("R2 = ", R2),
    x = 25,
    y = 75
  ), inherit.aes = F) +
  scale_colour_gradient2() +
  theme_hpa() +
  ggtitle("Age")


```


## Soma

```{r}

soma_dat <- 
    data_soma |> 
    rename(NPX = RFU) |> 
    select(DAid, Assay, NPX) |> 
    filter(!is.na(DAid)) |> 
    mutate(NPX = ifelse(NPX == -Inf, 0, NPX))


data_age_soma <- 
    soma_dat |> 
    filter(DAid %in% meta_age$DAid) |> 
    select(DAid, Assay, NPX) |> 
    pivot_wider(names_from = Assay, 
    values_from = NPX) |> 
    left_join(meta_age, by = "DAid") 

split_age_soma <- generate_split(data = data_age_soma, variable_stratify = "Age")

age_prediction_soma <- 
    continuous_prediction(split_train = split_age_soma$data_train,
           split_test = split_age_soma$data_test,
           variable_predict = "Age",
           seed = 213) 

saveRDS(age_prediction_soma, "data/processed/ML_age_Soma.rds")
# Plot important proteins
age_prediction_soma$important_proteins |> 
  rename(Assay = Variable) |> 
  translate_soma() |> 
  head(25) |> 
  ggplot(aes(x = fct_reorder(Assay, Importance), y = Importance, color = Sign)) +
  geom_segment(aes(x = Assay, xend = Assay, y = 0, yend = Importance), linewidth = 0.8) +
  geom_point(size = 3) +
  coord_flip() +
  theme_hpa()



# Top 10 profiles
top10_soma <- 
  age_prediction_soma$important_proteins |> 
  head(10) |> 
  pull(Variable)

data_soma |> 
  filter(Assay %in% top10_soma) |> 
  left_join(meta |> 
  select(DAid, Age, Class), by = "DAid") |> 
  mutate(Assay = factor(Assay, levels = top10_olink)) |> 
  ggplot(aes(Age, RFU)) +
  geom_point(aes(color = Class)) +
  geom_smooth(color = "white") +
  facet_wrap(~EntrezGeneSymbol, scales = "free_y", nrow = 2) +
  scale_color_manual(values = pal_class) +
  theme_hpa()


# Plot predictions
R2 <-
  age_prediction_soma$performance |>
  filter(.metric == "rsq") |>
  pull(.estimate) |>
  round(2)

age_prediction_soma$predictions |>
  mutate(DAid = split_age_soma$data_test$DAid) |>
  left_join(meta, by = "DAid") |>
  mutate(offset = Variable - .pred) |>
  ggplot(aes(Variable, .pred, color = offset)) +
  geom_point() +
  geom_abline(intercept = 0,
              slope = 1,
              lty = "dashed") +
  geom_text(aes(
    label = paste0("R2 = ", R2),
    x = 25,
    y = 75
  ), inherit.aes = F) +
  scale_colour_gradient2() +
  theme_hpa() +
  ggtitle("Age")


```

# Detectability

```{r}



data_olink |> 
  left_join(meta) |> 
  mutate(under_LOD = ifelse(NPX < LOD, "Yes", "No")) |> 
  count(Disease, Assay, under_LOD) |>
  filter(under_LOD == "Yes") |>
  ggplot(aes(n)) +
  geom_histogram() +
  facet_wrap(~Disease, scales = "free") 



```
## BAMSE

```{r}

diseases <- 
  meta |> 
  distinct(Class, Disease) |> 
  mutate(Class = factor(Class, levels = rev(names(pal_class)))) |> 
  arrange(Class, Disease)

data_olink |>
  mutate(above_LOD = ifelse(NPX > LOD, "Yes", "No")) |> 
  left_join(meta |>
              select(DAid, Disease, Class), by = "DAid") |> 
  group_by(Class, Disease, DAid) |>
  summarize(above_LOD_count = sum(NPX > LOD), .groups = "drop") |>
  ungroup() |> 
    mutate(Disease = factor(Disease, levels = diseases$Disease)) |>

  ggplot(aes(DAid, above_LOD_count, fill = Class)) +
  geom_col() +
  facet_wrap(~Disease, scales = "free_x", nrow = 1) +
    scale_fill_manual(values = pal_class) +
  theme_hpa(angled = T, axis_x = F)


df_summary <- data_olink |>
  mutate(above_LOD = ifelse(NPX > LOD, "Yes", "No")) |>
  left_join(meta |> select(DAid, Disease, Class), by = "DAid") |> 
  group_by(Class, Disease, DAid) |>
  summarize(above_LOD_count = sum(NPX > LOD), .groups = "drop") |> 
  ungroup() |> 
      mutate(Disease = factor(Disease, levels = diseases$Disease)) 


# calculate mean per disease for plotting line
means <- df_summary |>
  group_by(Disease) |>
  summarize(mean_val = mean(above_LOD_count)) |> 
      mutate(Disease = factor(Disease, levels = diseases$Disease)) 


df_summary |>
  mutate(Disease = factor(Disease, levels = diseases$Disease)) |>
  ggplot(aes(DAid, above_LOD_count, fill = Class)) +
  geom_col() +
  geom_hline(
    data = means,
    aes(yintercept = mean_val),
    linetype = "dashed", color = "black"
  ) +
  facet_wrap(~Disease, scales = "free_x", nrow = 1) +
  scale_fill_manual(values = pal_class) +
  theme_hpa(angled = TRUE, axis_x = FALSE)


```
```{r}
bamse_samples <- 
  manifest_raw |> 
  filter(Cohort == "BAMS") |> 
  select(DAid, Age, Sex, BMI, Disease, Class, `Extra data`) |> 
  mutate(
    Visit = str_extract(`Extra data`, "(?<=follow_up: )\\d+"),
    Subject = str_extract(`Extra data`, "(?<=subject_id: )\\d+")
  ) |> 
    select(-`Extra data`)

data_olink |>
  filter(DAid %in% bamse_samples$DAid) |> 
  mutate(above_LOD = ifelse(NPX > LOD, "Yes", "No")) |>
  left_join(bamse_samples |>
              select(DAid, Subject, Visit), by = "DAid") |> 
  group_by(Subject, Visit) |>
  summarize(above_LOD_count = sum(NPX > LOD), .groups = "drop") |>
  ungroup() |> 
  ggplot(aes(Subject, above_LOD_count, fill = Class)) +
  geom_col() +
  facet_wrap(~Visit) +
  theme_hpa(angled = T)


# Count how many times each protein is above LOD per subject across visits
dat <-
  data_olink |>
  filter(DAid %in% bamse_samples$DAid) |> 
  mutate(above_LOD = ifelse(NPX > LOD, "Yes", "No")) |>
  left_join(bamse_samples |>
              select(DAid, Subject, Visit), by = "DAid") |>
  group_by(Subject, Assay) |>
  summarize(above_LOD_count = sum(NPX > LOD), .groups = "drop") |>
  ungroup()

# Calculate number of visits per subject
number_of_visits <-
  bamse_samples |>
  filter(DAid %in% unique(bamse_samples$DAid)) |> 
  group_by(Subject) |>
  summarise(Number_of_visits = n_distinct(Visit)) |>
  arrange(Number_of_visits)

pal_detectability <- c(
  "None" = "#DF7176",
  "Some: < 50%" = "#F0BEC1",
  "Some: > 50%" = "#DFE2E1",
  "All" = "#3E6964"
)

# Proportion of visits where each protein is detected
lod_subject_dat <-
  dat |>
  left_join(number_of_visits, by = "Subject") |>
  mutate(
    perc = above_LOD_count / Number_of_visits,
    class = case_when(
      perc == 0 ~ "None",
      perc == 1 ~ "All",
      perc > 0 & perc <= 0.5 ~ "Some: < 50%",
      perc < 1 &
        perc > 0.5 ~ "Some: > 50%"
    )
  )  |>
  group_by(Subject) |>
  count(class) |>
  mutate(class = factor(class, levels = names(pal_detectability)))

# Average number of proteins detected in all visits
average_all <-
  lod_subject_dat |>
  filter(class == "All") |>
  pull(n) |>
  mean()

(average_all / length(unique(data_wellness$Assay))) * 100

# Average number of proteins not detected at any visit
average_none <-
  lod_subject_dat |>
  filter(class == "None") |>
  pull(n) |>
  mean()

(average_none / length(unique(data_wellness$Assay))) * 100

# Order subjects by number of proteins always detected
subject_order <-
  lod_subject_dat |>
  filter(class == "All") |>
  arrange(-n)

wellness_ids <-
  subject_order |>
  distinct(Subject) |>
  pull()

names(pal_wellness_individuals) <- wellness_ids

# Generate LOD barplot
plot_lod <-
  lod_subject_dat |>
  #mutate(Subject = factor(Subject, levels = subject_order$Subject)) |>
  ggplot(aes(Subject, n, fill = class)) +
  geom_col() +
  scale_fill_manual(values = pal_detectability) +
  theme_hpa(angled = T, axis_x = F) +
  xlab("Subject")

# Generate color tile bar to map individuals to their colors
plot_id <-
  subject_order |>
  ungroup() |>
  mutate(Subject = factor(Subject, levels = subject_order$Subject)) |>
  mutate(rank = rank(-n, ties.method = "first"),
         y = 1) |>
  ggplot(aes(Subject, y, fill = Subject)) +
  geom_tile(color = "white", show.legend = F) +
  scale_fill_manual(values = pal_wellness_individuals) +
  theme_hpa(axis_y = F) +
  coord_fixed() +
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank())

# Combine
plot_lod / plot_id +
  plot_layout(heights = c(10, 1))

ggsave(
  savepath_results("Manuscript-figures", "LOD_per_sample_names_v2.pdf"),
  h = 4,
  w = 15
) 
```